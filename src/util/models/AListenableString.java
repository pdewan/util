package util.models;import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Vector;import java.util.Enumeration;//import bus.uigen.VectorChangeSupport;//import bus.uigen.VectorListenable;//import bus.uigen.VectorListener;//import bus.uigen.VectorMethodsListener;@util.annotations.StructurePattern(util.annotations.StructurePatternNames.VECTOR_PATTERN)// public class AListenableString extends AMutableString implements// VectorListenable {public class AListenableString extends AMutableString implements		ListenableString {	Integer lastObservableGetIndex = null;		String name;	Object userObject, temp;	public AListenableString(String s) {		super(s);		initSerializedObject();	}	public AListenableString() {		super();		initSerializedObject();	}	public void addElement(char c) {		super.addElement(c);		stringChangeSupport.elementAdded(new Character(c));	}	@Override	public boolean addAll(Collection<? extends Character> elements) {		boolean retVal = super.addAll(elements);		// TODO Auto-generated method stub		stringChangeSupport.elementsAdded(elements);		return retVal;	}	public void addElement(String s) {		super.addElement(s);		List<Character> elementsAdded = new ArrayList();		for (int i = 0; i < s.length(); i++) {			elementsAdded.add(s.charAt(i));		}		stringChangeSupport.elementsAdded(elementsAdded);	}	public void insertElementAt(char element, int pos) {		super.insertElementAt(element, pos);		stringChangeSupport.elementInserted(new Character(element), pos);	}	public void removeElementAt(int pos, int cnt) {		super.removeElementAt(pos, cnt);		stringChangeSupport.elementRemoved(pos);	}	@Override	public void clear() {		super.clear();		stringChangeSupport.elementsCleared();	}	@Override	public void copy(int fromIndex, List<Character> to, int toIndex) {		super.copy(fromIndex, to, toIndex);		stringChangeSupport.elementCopied(fromIndex, to, toIndex);	}	@Override	public void initSerializedObject() {		try {			//should send original object//			stringChangeSupport = new VectorChangeSupport(this.toString());			stringChangeSupport = new VectorChangeSupport(this);		} catch (Exception e) {			e.printStackTrace();		}		// setParentLinksOfDescendents();	}	// StringChangeSupport stringChangeSupport = new StringChangeSupport(this);	// transient VectorChangeSupport<Character> stringChangeSupport = new	// VectorChangeSupport(this.toString());	transient VectorChangeSupport<Character> stringChangeSupport;	@util.annotations.ObserverRegisterer(util.annotations.ObserverTypes.VECTOR_LISTENER)	public void addVectorListener(VectorListener vectorListener) {		stringChangeSupport.addVectorListener(vectorListener);	}	public void removeVectorListener(VectorListener vectorListener) {		stringChangeSupport.removeVectorListener(vectorListener);	}	public void addVectorMethodsListener(VectorMethodsListener vectorListener) {		stringChangeSupport.addVectorMethodsListener(vectorListener);	}	public void removeVectorMethodsListener(VectorMethodsListener vectorListener) {		stringChangeSupport.removeVectorMethodsListener(vectorListener);	}	@Override	public void addVectorListeners(Collection<VectorListener> someListeners) {		for (VectorListener aListener:someListeners) {			addVectorListener(aListener);		}			}	@Override	public ListenableVector<Character> deepClone() {		// TODO Auto-generated method stub		return null;	}	@Override	public void setVectorChangeSupport(VectorChangeSupport<Character> newVal) {		stringChangeSupport = newVal;	}	@Override	public VectorChangeSupport<Character> getVectorChangeSupport() {		return stringChangeSupport;	}	@Override	public Character observableGet(Integer pos) {		Character retVal = stringBuffer.charAt(pos);		lastObservableGetIndex = pos;		stringChangeSupport.elementRead(retVal, pos);				return retVal;	}	@Override	public Integer lastObservableGetIndex() {		return lastObservableGetIndex;	}	@Override	public Object observableGetUserObject() {		stringChangeSupport.userObjectRead();		lastObservableGetIndex = -1;		return userObject;	}	@Override	public Object observableGetTemp() {		stringChangeSupport.tempRead();		lastObservableGetIndex = -2;		return temp;	}	@Override	public String getName() {		return name;	}	@Override	public void setName(String newVal) {		name = newVal;			}	@Override	public void addVectorMethodsListeners(			Collection<? extends VectorMethodsListener> someListeners) {		// TODO Auto-generated method stub			}	@Override	public void unObservableSet(int pos, Character element) {		super.setElementAt(element, pos);	}	@Override	public void unObservableAdd(int aToIndex, Character anElement) {		stringBuffer.insert(aToIndex, anElement);//		super.insertElementAt(anElement, aToIndex);	}	@Override	public boolean add(Character arg0) {		 super.addElement(arg0);		 return true;	}	@Override	public void add(int arg0, Character arg1) {		insertElementAt(arg1, arg0);	}	@Override	public boolean addAll(int arg0, Collection<? extends Character> arg1) {		return false;	}	@Override	public boolean contains(Object arg0) {		// TODO Auto-generated method stub		return false;	}	@Override	public boolean containsAll(Collection<?> arg0) {		// TODO Auto-generated method stub		return false;	}	@Override	public Character get(int arg0) {		return elementAt(arg0);	}//	@Override//	public int indexOf(Object arg0) {//		// TODO Auto-generated method stub//		return 0;//	}	@Override	public boolean isEmpty() {		// TODO Auto-generated method stub		return stringBuffer.length() == 0;	}	@Override	public Iterator<Character> iterator() {		// TODO Auto-generated method stub		return null;	}	@Override	public int lastIndexOf(Object arg0) {		return stringBuffer.lastIndexOf(((Character) arg0).toString());	}	@Override	public ListIterator<Character> listIterator() {		// TODO Auto-generated method stub		return null;	}	@Override	public ListIterator<Character> listIterator(int arg0) {		// TODO Auto-generated method stub		return null;	}	@Override	public boolean remove(Object arg0) {		Character c = (Character) arg0;		int index = stringBuffer.indexOf(c.toString());		if (index < 0)			return false;		 remove(index);		 return true;		 	}	@Override	public Character remove(int arg0) {		// TODO Auto-generated method stub		Character retVal = stringBuffer.charAt(arg0);		stringBuffer.deleteCharAt(arg0);		return retVal;	}	@Override	public boolean removeAll(Collection<?> arg0) {		for (Object c: arg0)			remove (c);		return true;	}	@Override	public boolean retainAll(Collection<?> arg0) {		// TODO Auto-generated method stub		return false;	}	@Override	public Character set(int arg0, Character arg1) {		setElementAt(arg1, arg0);		return arg1;//		return null;	}	@Override	public List<Character> subList(int arg0, int arg1) {		List<Character> list = new ArrayList();		for (int i = arg0; i < arg1; i++) {			list.add(stringBuffer.charAt(i));		}		// TODO Auto-generated method stub		return list;	}	@Override	public Object[] toArray() {		Character[] retVal = new Character[stringBuffer.length()];		for (int i=0; i < retVal.length; i++)			retVal[i] = stringBuffer.charAt(i);		return retVal;	}	@Override	public <T> T[] toArray(T[] arg0) {		// TODO Auto-generated method stub		return null;	}	public ListenableVector<Character> clone() {		return new AListenableString(stringBuffer.toString());	}	public void move(int fromIndex, int toIndex){ 		super.move(fromIndex, toIndex);		stringChangeSupport.elementMoved(fromIndex, toIndex);		};	public void move(int fromIndex, List<Character> to, int toIndex){ 		super.move(fromIndex, toIndex); 		stringChangeSupport.elementMoved(fromIndex, to, toIndex);		};	public void copy(int fromIndex, int toIndex){		super.copy(fromIndex, toIndex); 		stringChangeSupport.elementCopied(fromIndex, toIndex);		};//	public void copy(int fromIndex, List<Character> to, int toIndex){//		super.copy(fromIndex, to, toIndex);  //		};//		public void copyAndInsert(int fromIndex, int toIndex){ 		super.copyAndInsert(fromIndex, toIndex);  		stringChangeSupport.elementCopiedAndInserted(fromIndex, toIndex);		};	public void copyAndInsert(int fromIndex, List<Character> to, int toIndex){ 		super.copyAndInsert(fromIndex, to, toIndex); 		stringChangeSupport.elementCopiedAndInserted(fromIndex, to, toIndex);		};	public void replace(int fromIndex, int toIndex){ 		super.replace(fromIndex, toIndex); 		stringChangeSupport.elementReplaced(fromIndex, toIndex);			};	public void replace(int fromIndex, List<Character> to, int toIndex){ 		super.replace(fromIndex, to, toIndex); //		stringChangeSupport.elemenReplaced(fromIndex, to, toIndex);		};	public void copyToUserObject(int index){ super.copyToUserObject(index); 	stringChangeSupport.elementCopiedToUserObject(index);};	public void copyFromUserObject(int index){ super.copyFromUserObject(index); 	stringChangeSupport.elementCopiedFromUserObject(index);};		public void copyToTemp(int index){ super.copyToTemp(index);  	stringChangeSupport.elementCopiedToTemp(index);};	public void copyFromTemp(int index){ super.copyFromTemp(index); 	stringChangeSupport.elementCopiedFromUserObject(index);};		public void copyTempToUserObject(Object aSource){ super.copyTempToUserObject(aSource);  	stringChangeSupport.tempCopiedToUserObject(aSource);};	public void copyUserObjectToTemp(Object aSource){ super.copyUserObjectToTemp(aSource); 	stringChangeSupport.userObjectCopiedToTemp(aSource);	};	@Override	public void setPointer(Integer newVal) {		super.setPointer(newVal);		stringChangeSupport.pointerChanged(newVal);	}		@Override	public void setPointer2(Integer newVal) {		super.setPointer2(newVal);		stringChangeSupport.pointer2Changed(newVal);	}	@Override	public ListenableVector getRoot() {		// TODO Auto-generated method stub		return this;	}	@Override	public void userOperation(int aTargetIndex, Object anOperaton) {		stringChangeSupport.userOperationOccured(aTargetIndex, anOperaton);	}}