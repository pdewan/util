package util.models;import java.beans.PropertyChangeListener;import java.beans.PropertyChangeSupport;import util.annotations.ComponentWidth;import util.annotations.Visible;public class ACheckedObject<ObjectType> implements CheckedObject<ObjectType> {	static String TEMPLATE_USER_DATA = "@#98sh!";	ObjectType object;	boolean status = true;	Object userData;	public ACheckedObject(ObjectType theObject) {		object = theObject;	}	public ACheckedObject(ObjectType theObject, Boolean theStatus,			Object theUserData) {		object = theObject;		userData = theUserData;		status = theStatus;	}	public ObjectType getObject() {		return object;	}	@ComponentWidth(20)	public boolean getStatus() {		return status;	}	public void setStatus(boolean newVal) {		boolean oldValue = status;		status = newVal;		propertyChange.firePropertyChange("status", oldValue, newVal);	}	@Override	public void setUserData(Object theUserData) {		userData = theUserData;	}	@Override	@Visible(false)	public Object getUserData() {		return userData;	}	public Object clone() {		return new ACheckedObject<ObjectType>(object, status, userData);	}	String toString(boolean val) {		if (val)			return "Yes";		else			return "No";	}	@Override	@Visible(false)	public boolean isTemplate() {		return getUserData() == TEMPLATE_USER_DATA;	}	public String toString() {		// if (getUserData() == TEMPLATE_USER_DATA)		if (isTemplate())			return "" + object;		else			return "" + object + "(" + toString(status) + ")";	}	transient PropertyChangeSupport propertyChange = new PropertyChangeSupport(			this);	@util.annotations.ObserverRegisterer(util.annotations.ObserverTypes.PROPERTY_LISTENER)	public void addPropertyChangeListener(PropertyChangeListener l) {		propertyChange.addPropertyChangeListener(l);	}}