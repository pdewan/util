package util.models;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.Vector;import java.util.Enumeration;import util.annotations.Visible;//import bus.uigen.IndexedElementChecker;//import bus.uigen.VectorInterface;public class AMutableString implements VectorInterface<Character>,		java.io.Serializable {	StringBuffer stringBuffer;	Object userObject, temp;	public AMutableString(String s) {		stringBuffer = new StringBuffer(s);	}	public AMutableString() {		stringBuffer = new StringBuffer("");	}	public int size() {		return stringBuffer.length();	}	public String toString() {		return stringBuffer.toString();	}	public void addElement(char c) {		stringBuffer.append(c);	}	public void addElement(Character c) {		addElement(c.charValue());	}	@Visible(false)	public void setString(String newVal) {		clear();		addElement(newVal);//		List<Character> addedList = new ArrayList();//		for (int i=0; i < newVal.length(); i++) {//			addedList.add(newVal.charAt(i));//		}//		addAll(addedList);	}		@Override	public boolean addAll(Collection<? extends Character> elements) {		// TODO Auto-generated method stub		for (Character c : elements)			stringBuffer.append(c);		return true;	}	// public void addElement(Object c) {	// addElement((Character) c);	// }	public void addElement(String s) {		stringBuffer.append(s);	}	public void insertElementAt(char element, int pos) {		stringBuffer.insert(pos, element);	}	//	public void insertElementAt(char element, int pos) {//		stringBuffer.insert(pos, element);//	}	public void insert(int pos, char element) {		insertElementAt(element, pos);	}		public void insertElementAt(Character element, int pos) {		insertElementAt(element.charValue(), pos);	}	// public void insertElementAt(Object element, int pos) {	// insertElementAt((Character) element, pos);	// }	void insertElementAt(String element, int pos) {		stringBuffer.insert(pos, element);	}	public static StringBuffer removeElementAt(StringBuffer stringBuffer,			int pos, int cnt) {		if (pos < 0 || cnt < 0 || pos + cnt > stringBuffer.length())			throw new IndexOutOfBoundsException();		int leftOver = stringBuffer.length() - (pos + cnt);		if (leftOver == 0) {			stringBuffer.setLength(pos);			return stringBuffer;		}		char[] chrs = new char[leftOver];		stringBuffer.getChars(pos + cnt, stringBuffer.length(), chrs, 0);		stringBuffer.setLength(pos);		stringBuffer.append(chrs);		return stringBuffer;	}	public void removeElementAt(int pos, int cnt) {		removeElementAt(stringBuffer, pos, cnt);	}	public boolean removeElement(Character c) {		int index = indexOf(c);		if (index >= 0) {			removeElementAt(index);			// return;			return true;		}		return false;		// return;	}	public void removeElementAt(int pos) {		removeElementAt(pos, 1);	}	public Vector toVector() {		Vector v = new Vector(stringBuffer.length());		for (int i = 0; i < stringBuffer.length(); i++)			v.addElement(new Character(stringBuffer.charAt(i)));		return v;	}	public Enumeration elements() {		return toVector().elements();	}	public char charAt(int pos) {		return stringBuffer.charAt(pos);	}	public Character elementAt(int pos) {		return new Character(stringBuffer.charAt(pos));	}	public void setElementAt(char element, int pos) {		stringBuffer.setCharAt(pos, element);	}	public void setElementAt(Character element, int pos) {		stringBuffer.setCharAt(pos, element.charValue());	}	// public void setElementAt(Character element, int pos) {	// stringBuffer.setCharAt(pos, ((Character) element).charValue());	// }	public int indexOf(Object c) {		return stringBuffer.toString().indexOf(((Character) c).charValue());	}	public void removeAllElements() {		while (size() > 0)			this.removeElementAt(this.size() - 1);	}	// public int indexOf(Object c) {	// return indexOf((Character) c);	//	// }	public boolean equals(Object s) {		if (!(s instanceof AMutableString))			return super.equals(s);		// System.out.println("equal called\n");		return stringBuffer.toString().equals(				((AMutableString) s).stringBuffer.toString());	}	@Override	public AListenableVector getParent() {		// TODO Auto-generated method stub		return null;	}	@Override	public Object getUserObject() {		// TODO Auto-generated method stub		return userObject;	}	@Override	public void initSerializedObject() {		// TODO Auto-generated method stub	}	@Override	public boolean isColumnEditable(int index) {		// TODO Auto-generated method stub		return false;	}	@Override	public boolean isEditable(int index) {		// TODO Auto-generated method stub		return false;	}	@Override	public void open(Character element) {		// TODO Auto-generated method stub	}	@Override	@util.annotations.Validate("addElement")	public boolean preAddElement(Character element) {		// TODO Auto-generated method stub		return false;	}	@Override	@util.annotations.Validate("elementAt")	public boolean preElementAt(int index) {		// TODO Auto-generated method stub		return false;	}	@Override	@util.annotations.Validate("insertElementAt")	public boolean preInsertElementAt(Character element, int pos) {		// TODO Auto-generated method stub		return false;	}	@Override	@util.annotations.Validate("removeElement")	public boolean preRemoveElement(Character element) {		// TODO Auto-generated method stub		return false;	}	@Override	@util.annotations.Validate("removeElementAt")	public boolean preRemoveElementAt(int index) {		// TODO Auto-generated method stub		return false;	}	@Override	@util.annotations.Validate("setElementAt")	public boolean preSetElementAt(Character element, int pos) {		// TODO Auto-generated method stub		return false;	}	@Override	public void setIsEditable(int index, boolean status) {		// TODO Auto-generated method stub	}	@Override	public void setUserObject(Object newValue) {		// TODO Auto-generated method stub	}	@Override	public IndexedElementChecker getIndexedElementChecker() {		// TODO Auto-generated method stub		return null;	}//	@Override//	public void setIndexedElementChecker(IndexedElementChecker theChecker) {//		// TODO Auto-generated method stub////	}	@Override	public void copy(int fromIndex, int toIndex) {	}	@Override	public void copy(int fromIndex, List<Character> to, int toIndex) {		Character temp = elementAt(fromIndex);		if (to instanceof ListenableVector) {			((ListenableVector) to).unObservableSet(toIndex, temp);		} else		to.set(toIndex, temp);	}		@Override	public void move(int fromIndex, int toIndex) {		if (fromIndex == toIndex)			return;			Character temp = elementAt(fromIndex);//			ElementType temp = get(fromIndex);			if (toIndex > fromIndex) {				stringBuffer.insert(toIndex, temp);				stringBuffer.deleteCharAt(fromIndex);//				insertElementAt(temp, toIndex);//				remove(fromIndex);			} else if (toIndex < fromIndex) {				stringBuffer.insert(toIndex, temp);				stringBuffer.deleteCharAt(fromIndex + 1);////				super.insertElementAt(temp, toIndex);//				super.remove(fromIndex + 1);//				insertElementAt(temp, toIndex);//				remove(fromIndex + 1);			}	}		@Override	public void copyAndInsert(int fromIndex, int toIndex) {		if (fromIndex == toIndex)			return;			Character temp = elementAt(fromIndex);//			ElementType temp = get(fromIndex);//			if (toIndex > fromIndex) 				stringBuffer.insert(toIndex, temp);//				stringBuffer.deleteCharAt(fromIndex);//				insertElementAt(temp, toIndex);//				remove(fromIndex);				}		@Override	public void copyAndInsert(int fromIndex, List<Character> to, int toIndex) {		Character temp = elementAt(fromIndex);		if (to instanceof ListenableVector) {			((ListenableVector) to).unObservableAdd(toIndex, temp);		} else		     to.add(toIndex, temp);//		super.remove(fromIndex);	}	@Override	public void move(int fromIndex, List<Character> to, int toIndex) {		Character temp = elementAt(fromIndex);		if (to instanceof ListenableVector) {			((ListenableVector) to).unObservableAdd(toIndex, temp);		} else		     to.add(toIndex, temp);	}	@Override	public void replace(int fromIndex, int toIndex) {		// TODO Auto-generated method stub	}	@Override	public void replace(int fromIndex, List<Character> to, int toIndex) {		// TODO Auto-generated method stub	}	@Override	public void swap(int index1, int index2) {		// TODO Auto-generated method stub	}	@Override	public void swap(int index1, List<Character> other, int index2) {		// TODO Auto-generated method stub	}	@Override	public void clear() {		stringBuffer.setLength(0);	}	@Override	public void setIndexedElementChecker(			IndexedElementChecker<Character> theChecker) {		// TODO Auto-generated method stub			}	@Override	public void copyToUserObject(int index) {		userObject = stringBuffer.charAt(index);			}	@Override	public void copyFromUserObject(int index) {		stringBuffer.setCharAt(index, (char) userObject);	}		@Override	public void copyToTemp(int index) {		temp = stringBuffer.charAt(index);			}	@Override	public void copyFromTemp(int index) {		stringBuffer.setCharAt(index, (char) temp);	}	@Override	public Object getTemp() {		return temp;	}	@Override	public void setTemp(Object newValue) {		temp = newValue;	}	@Override	public void copyTempToUserObject(Object aSource) {		userObject = temp;	}	@Override	public void copyUserObjectToTemp(Object aSource) {		temp = userObject;			}	Integer pointer = null;	@Override	public void setPointer(Integer newVal) {		pointer = newVal;	}	@Override	public Integer getPointer() {		// TODO Auto-generated method stub		return pointer;	}	Integer pointer2 = null;	@Override	public void setPointer2(Integer newVal) {		pointer2 = newVal;	}	@Override	public Integer getPointer2() {		// TODO Auto-generated method stub		return pointer2;	}	@Override	public void setParent(ListenableVector theParent) {		// TODO Auto-generated method stub			}}