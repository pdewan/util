package util.models;import java.util.Vector;public class StringChangeSupport extends VectorChangeSupport<String> {	Object changeable;	VectorInterface<String> changeableCopy;	public StringChangeSupport(Object o) {		changeable = o;		changeableCopy = (VectorInterface) new AMutableString(o.toString());	}	protected int getSize() {		return changeableCopy.size();	}	public void elementAdded(String element) {		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(this,							VectorChangeEvent.AddComponentEvent, changeableCopy									.size(), null, element, changeableCopy									.size() + 1));		changeableCopy.addElement(element);		notifyElementAdded(element);	}	public void elementInserted(String element, int pos) {		String oldElement;		if (pos >= changeableCopy.size())			oldElement = null;		else			oldElement = changeableCopy.elementAt(pos);		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(this,							VectorChangeEvent.InsertComponentEvent, pos,							oldElement, element, changeableCopy.size() + 1));		changeableCopy.insertElementAt(element, pos);		notifyElementInserted(element, pos);	}	public void elementChanged(String element, int pos) {		String oldElement;		if (pos >= changeableCopy.size())			oldElement = null;		else			oldElement = changeableCopy.elementAt(pos);		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(this,							VectorChangeEvent.ChangeComponentEvent, pos,							oldElement, element, changeableCopy.size()));		changeableCopy.setElementAt(element, pos);		notifyElementChanged(element, pos);	}	public void elementRemoved(int pos) {		String oldElement;		if (pos >= changeableCopy.size())			oldElement = null;		else			oldElement = changeableCopy.elementAt(pos);		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(this,							VectorChangeEvent.DeleteComponentEvent, pos,							oldElement, null, changeableCopy.size() - 1));		changeableCopy.removeElementAt(pos);		notifyElementRemoved(pos);	}	public void elementRemoved(String element) {		int pos = changeableCopy.indexOf(element);		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(this,							VectorChangeEvent.DeleteComponentEvent, pos,							element, null, changeableCopy.size() - 1));		changeableCopy.removeElement(element);		notifyElementRemoved(element, pos);	}}