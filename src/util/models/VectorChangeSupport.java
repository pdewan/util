package util.models;import java.util.Collection;import java.util.Vector;//import bus.uigen.uiBean;//import bus.uigen.introspect.uiBean;import util.introspect.JavaIntrospectUtility;import util.misc.Common;public class VectorChangeSupport<ElementType> implements java.io.Serializable {	protected Vector listeners = new Vector();	protected transient Vector transientListeners = new Vector();	protected Vector methodsListeners = new Vector();	protected transient Vector transientMethodsListeners = new Vector();	protected Object changeable;	protected VectorInterface<ElementType> changeableCopy;	// Vector<ElementType> changeableCopy;	public VectorChangeSupport(Object o) {		changeable = o;		if (o instanceof String)			changeableCopy = (VectorInterface) new AMutableString((String) o);		else			// changeableCopy = new AVector (uiBean.toClassVector(o));			// changeableCopy = new AVector (toClassVector(o));			changeableCopy = new AVector(JavaIntrospectUtility.toClassVector(o));	}	public Vector toClassVector(ElementType object) {		return (new Vector((Vector) object));	}	public void initTransients() {		if (transientListeners == null)			transientListeners = new Vector();		if (transientMethodsListeners == null)			transientMethodsListeners = new Vector();	}	public VectorChangeSupport() {		/*		 * System.out.println("CONSTRUCTOR!!"); listeners = new Vector();		 * methodsListeners = new Vector();		 */	}	public void addVectorListener(VectorListener vectorListener) {		// if (listeners == null) listeners = new Vector();		initTransients();		if (vectorListener instanceof java.io.Serializable) {//			if (listeners.contains(vectorListener))				if (Common.contains(listeners, vectorListener))				return;			listeners.addElement(vectorListener);		} else {			if (transientListeners.contains(vectorListener))				return;			transientListeners.addElement(vectorListener);		}	}			public void removeVectorListener(VectorListener vectorListener) {		initTransients();		listeners.removeElement(vectorListener);		transientListeners.removeElement(vectorListener);	}	public void addVectorMethodsListener(VectorMethodsListener vectorListener) {		// if (methodsListeners == null) methodsListeners = new Vector();		initTransients();		if (vectorListener instanceof java.io.Serializable) {//			if (methodsListeners.contains(vectorListener))				if (Common.contains (methodsListeners, vectorListener))				return;			methodsListeners.addElement(vectorListener);		} else {			if (transientMethodsListeners.contains(vectorListener))				return;			transientMethodsListeners.addElement(vectorListener);		}	}	public void removeVectorMethodsListener(VectorMethodsListener vectorListener) {		initTransients();		methodsListeners.removeElement(vectorListener);		transientMethodsListeners.removeElement(vectorListener);	}	public void elementsAdded(Collection<? extends ElementType> elements) {		initTransients();		for (int i = 0; i < listeners.size(); i++)			try {				((VectorListener) listeners.elementAt(i))						.updateVector(new VectorChangeEvent(changeable,								VectorChangeEvent.AddAllComponentsEvent,								changeableCopy.size(), null, elements,								changeableCopy.size() + elements.size()));			} catch (Exception e) {				e.printStackTrace();			}		for (int i = 0; i < transientListeners.size(); i++)			try {				((VectorListener) transientListeners.elementAt(i))						.updateVector(new VectorChangeEvent(changeable,								VectorChangeEvent.AddAllComponentsEvent,								changeableCopy.size(), null, elements,								changeableCopy.size() + elements.size()));			} catch (Exception e) {				e.printStackTrace();			}		changeableCopy.addAll(elements);		notifyElementsAdded(elements);	}	public void elementAdded(ElementType element) {		// System.out.println("adding element" + element);		// System.out.println("size" + changeableCopy.size() + 1);		initTransients();		for (int i = 0; i < listeners.size(); i++)			try {				((VectorListener) listeners.elementAt(i))						.updateVector(new VectorChangeEvent(changeable,								VectorChangeEvent.AddComponentEvent,								changeableCopy.size(), null, element,								changeableCopy.size() + 1));			} catch (Exception e) {				e.printStackTrace();			}		for (int i = 0; i < transientListeners.size(); i++)			try {				((VectorListener) transientListeners.elementAt(i))						.updateVector(new VectorChangeEvent(changeable,								VectorChangeEvent.AddComponentEvent,								changeableCopy.size(), null, element,								changeableCopy.size() + 1));			} catch (Exception e) {				e.printStackTrace();			}		changeableCopy.addElement(element);		notifyElementAdded(element);	}	protected void notifyElementAdded(ElementType element) {		// if (methodsListeners == null) methodsListeners = new Vector();		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementAdded(changeable, element, changeableCopy.size());		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementAdded(changeable, element, changeableCopy.size());		}	}	protected void notifyElementsAdded(			Collection<? extends ElementType> elements) {		// if (methodsListeners == null) methodsListeners = new Vector();		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementAdded(changeable, elements, changeableCopy.size());		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementsAdded(changeable, elements, changeableCopy.size());		}	}	protected void notifyAboutExistingElements(			VectorMethodsListener methodsListener) {		for (int i = 0; i < changeableCopy.size(); i++)			methodsListener.elementAdded(changeable,					changeableCopy.elementAt(i), i + 1);	}	protected void notifyAboutExistingElements(VectorListener eventListener) {		for (int i = 0; i < changeableCopy.size(); i++)			eventListener.updateVector(new VectorChangeEvent(changeable,					VectorChangeEvent.AddComponentEvent, i, null,					changeableCopy.elementAt(i), i + 1));	}	public void elementInserted(ElementType element, int pos) {		ElementType oldElement;		initTransients();		if (pos >= changeableCopy.size())			oldElement = null;		else			oldElement = changeableCopy.elementAt(pos);		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.InsertComponentEvent, pos,							oldElement, element, changeableCopy.size() + 1));		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.InsertComponentEvent, pos,							oldElement, element, changeableCopy.size() + 1));		changeableCopy.insertElementAt(element, pos);		notifyElementInserted(element, pos);	}		public void unobservableElementInserted(ElementType element, int pos) {				changeableCopy.insertElementAt(element, pos);	}	protected int getSize() {		return changeableCopy.size();	}	protected void notifyElementInserted(ElementType element, int pos) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementInserted(changeable, element, pos, getSize());		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementInserted(changeable, element, pos, getSize());		}	}	public void elementSwapped(int pos1, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.SwapComponentsEvent, pos1, pos2,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.SwapComponentsEvent, pos1, pos2,							null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.swap(pos1, pos2);		// System.out.println("after changeablecopy");		notifyElementSwapped(pos1, pos2);		// System.out.println("after notifyelementchanged");	}		public void elementSwapped(int pos1, Object other, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.SwapComponentsEvent, pos1, pos2,							null, changeableCopy.size(), other));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.SwapComponentsEvent, pos1, pos2,							null, changeableCopy.size(), other));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");//		changeableCopy.swap(pos1, null, pos2);		// System.out.println("after changeablecopy");		changeableCopy.setElementAt((ElementType) getChangeable(pos1), pos1);		notifyElementSwapped(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}		Object getChangeable(int index) {		if (changeable instanceof String) {			return ((String) changeable).charAt(index);		} else {			return ((Vector) changeable).get(index);		}	}	public void elementMoved(int pos1, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.MoveComponentEvent, pos1, pos2,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.MoveComponentEvent, pos1, pos2,							null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.move(pos1, pos2);		// System.out.println("after changeablecopy");		notifyElementMoved(pos1, pos2);		// System.out.println("after notifyelementchanged");	}		public void elementCopiedToUserObject(int pos) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyToUserObjectEvent, pos, null,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyToUserObjectEvent, pos, null,							null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.copyToUserObject(pos);		// System.out.println("after changeablecopy");		notifyElementCopiedToUserObject(pos);//		notifyElementMoved(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}		public void elementCopiedToTemp(int pos) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyToTempEvent, pos, null,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyToTempEvent, pos, null,							null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.copyToTemp(pos);		// System.out.println("after changeablecopy");		notifyElementCopiedToTemp(pos);//		notifyElementMoved(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}		public void elementCopiedFromUserObject(int pos) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyFromUserObjectEvent, pos, null,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyFromUserObjectEvent, pos, null,							null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.copyFromUserObject(pos);		// System.out.println("after changeablecopy");		notifyElementCopiedFromUserObject(pos);//		notifyElementMoved(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}		public void elementCopiedFromTemp(int pos) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyFromTempEvent, pos, null,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyFromTempEvent, pos, null,							null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.copyFromTemp(pos);		// System.out.println("after changeablecopy");		notifyElementCopiedFromTemp(pos);//		notifyElementMoved(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}		public void userObjectCopiedToTemp(Object aSource) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyUserObjectToTempEvent, -1, null,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyUserObjectToTempEvent, -1, null,							null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.copyUserObjectToTemp(aSource);		// System.out.println("after changeablecopy");//		notifyUserObjectToTemp(changeableCopy.getUserObject());		notifyUserObjectToTemp(aSource);//		notifyElementMoved(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}		public void tempCopiedToUserObject(Object aSource) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyTempToUserObjectEvent, -1, null,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyTempToUserObjectEvent, -1, null,							null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.copyTempToUserObject(aSource);		// System.out.println("after changeablecopy");//		notifyTempToUserObject(changeableCopy.getUserObject());		notifyTempToUserObject(aSource);//		notifyElementMoved(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}	public void elementMoved(int pos1, Object other, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.RemoteMoveComponentEvent, pos1, pos2,							other, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.RemoteMoveComponentEvent, pos1, pos2,							other, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");//		changeableCopy.insertElementAt((ElementType) getChangeable(pos1), pos1);		changeableCopy.removeElementAt(pos1);//		changeableCopy.move(pos1, null, pos2);		// System.out.println("after changeablecopy");		notifyElementMoved(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}	public void elementCopyInserted(int pos1, Object other, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.RemoteCopyInsertComponentEvent, pos1, pos2,							other, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.RemoteCopyInsertComponentEvent, pos1, pos2,							other, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");//		changeableCopy.insertElementAt((ElementType) getChangeable(pos1), pos1);//		changeableCopy.removeElementAt(pos1);//		changeableCopy.move(pos1, null, pos2);		// System.out.println("after changeablecopy");		notifyElementMoved(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}	public void elementCopied(int pos1, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyComponentEvent, pos1, pos2,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyComponentEvent, pos1, pos2,							null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.copy(pos1, pos2);		// System.out.println("after changeablecopy");		notifyElementCopied(pos1, pos2);		// System.out.println("after notifyelementchanged");	}		public void elementCopiedAndInserted(int pos1, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyInsertComponentEvent, pos1, pos2,							null, changeableCopy.size() + 1));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.CopyInsertComponentEvent, pos1, pos2,							null, changeableCopy.size() + 1));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.copyAndInsert(pos1, pos2);		// System.out.println("after changeablecopy");		notifyElementCopyInserted(pos1, pos2);		// System.out.println("after notifyelementchanged");	}	public void elementCopied(int pos1, Object other, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.RemoteCopyComponentEvent, pos1, pos2,							other, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.RemoteCopyComponentEvent, pos1, pos2,							other, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");//		changeableCopy.setElementAt((ElementType) getChangeable(pos1), pos1);//		changeableCopy.copy(pos1, null, pos2);		// System.out.println("after changeablecopy");		notifyElementCopied(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}		public void elementCopiedAndInserted(int pos1, Object other, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.RemoteCopyInsertComponentEvent, pos1, pos2,							other, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.RemoteCopyInsertComponentEvent, pos1, pos2,							other, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");//		changeableCopy.setElementAt((ElementType) getChangeable(pos1), pos1);//		changeableCopy.copy(pos1, null, pos2);		// System.out.println("after changeablecopy");		notifyElementCopyInserted(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}	public void elementReplaced(int pos1, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReplaceComponentEvent, pos1,							pos2, null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReplaceComponentEvent, pos1,							pos2, null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.replace(pos1, pos2);		// System.out.println("after changeablecopy");		notifyElementReplaced(pos1, pos2);		// System.out.println("after notifyelementchanged");	}	public void elementReplaced(int pos1, Object other, int pos2) {		// System.out.println("elementChanged" + (listeners == null));		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReplaceComponentEvent, pos1,							pos2, null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReplaceComponentEvent, pos1,							pos2, null, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementswapped(), after for loop");		changeableCopy.replace(pos1, null, pos2);		// System.out.println("after changeablecopy");		notifyElementReplaced(pos1, other, pos2);		// System.out.println("after notifyelementchanged");	}	public void elementChanged(ElementType element, int pos) {		// System.out.println("elementChanged" + (listeners == null));		ElementType oldElement;		if (pos >= changeableCopy.size())			oldElement = null;		else			oldElement = changeableCopy.elementAt(pos);		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ChangeComponentEvent, pos,							oldElement, element, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ChangeComponentEvent, pos,							oldElement, element, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementchanged(), after for loop");		changeableCopy.setElementAt(element, pos);//		System.out.println("after changeablecopy");		notifyElementChanged(element, pos);//		System.out.println("after notifyelementchanged");	}		public void unobservableElementChanged(ElementType element, int pos) {				changeableCopy.setElementAt(element, pos);	}		public void userObjectChanged(Object element) {		// System.out.println("elementChanged" + (listeners == null));		Object oldElement = changeableCopy.getUserObject();				for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ChangeUserObjectEvent, -1,							oldElement, element, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ChangeUserObjectEvent, -1,							oldElement, element, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementchanged(), after for loop");		changeableCopy.setUserObject(element);//		System.out.println("after changeablecopy");		notifyUserObjectChanged(element);//		System.out.println("after notifyelementchanged");	}		public void tempChanged(Object element) {		// System.out.println("elementChanged" + (listeners == null));		Object oldElement = changeableCopy.getTemp();				for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ChangeTempEvent, -1,							oldElement, element, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ChangeTempEvent, -1,							oldElement, element, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementchanged(), after for loop");		changeableCopy.setTemp(element);//		System.out.println("after changeablecopy");		notifyTempChanged(element);//		System.out.println("after notifyelementchanged");	}	public void pointerChanged(Integer element) {		// System.out.println("elementChanged" + (listeners == null));		Integer oldElement = changeableCopy.getPointer();				for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.PointerChangeEvent, -1,							oldElement, element, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.PointerChangeEvent, -1,							oldElement, element, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementchanged(), after for loop");		changeableCopy.setPointer(element);//		System.out.println("after changeablecopy");		notifyPointerChanged(element);//		System.out.println("after notifyelementchanged");	}		public void userOperationOccured(Integer aPosition, Object userAction) {		// System.out.println("elementChanged" + (listeners == null));//		Integer oldElement = changeableCopy.getPointer();				for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.UserOperationEvent, -1,							userAction, aPosition, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.UserOperationEvent, -1,							userAction, aPosition, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementchanged(), after for loop");//		changeableCopy.userOperationOccured(element);//		System.out.println("after changeablecopy");		notifyUserOperationOccurred(aPosition, userAction);//		System.out.println("after notifyelementchanged");	}		public void pointer2Changed(Integer element) {		// System.out.println("elementChanged" + (listeners == null));		Integer oldElement = changeableCopy.getPointer2();				for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.Pointer2ChangeEvent, -1,							oldElement, element, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.Pointer2ChangeEvent, -1,							oldElement, element, changeableCopy.size()));		// System.out.println("in vectorchangesupport.elementchanged(), after for loop");		changeableCopy.setPointer2(element);//		System.out.println("after changeablecopy");		notifyPointer2Changed(element);//		System.out.println("after notifyelementchanged");	}	protected void notifyElementChanged(ElementType element, int pos) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementChanged(changeable, element, pos);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementChanged(changeable, element, pos);		}	}		protected void notifyUserObjectChanged(Object newVal) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.userObjectChanged(changeable, newVal);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.userObjectChanged(changeable, newVal);		}	}			protected void notifyTempChanged(Object newVal) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.tempChanged(changeable, newVal);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.tempChanged(changeable, newVal);		}	}		protected void notifyPointerChanged(Integer newPosition) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.pointerChanged(changeable, newPosition);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.pointerChanged(changeable, newPosition);		}	}		protected void notifyPointer2Changed(Integer newPosition) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.pointer2Changed(changeable, newPosition);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.pointer2Changed(changeable, newPosition);		}	}		protected void notifyUserOperationOccurred(Integer newPosition, Object anOperation) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.userOperationOccured(changeable, newPosition, anOperation);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))			.userOperationOccured(changeable, newPosition, anOperation);		}	}	public void elementRemoved(int pos) {		try {			initTransients();			ElementType oldElement;			if (pos >= changeableCopy.size())				oldElement = null;			else				oldElement = changeableCopy.elementAt(pos);			for (int i = 0; i < listeners.size(); i++)				((VectorListener) listeners.elementAt(i))						.updateVector(new VectorChangeEvent(changeable,								VectorChangeEvent.DeleteComponentEvent, pos,								oldElement, null, changeableCopy.size() - 1));			for (int i = 0; i < transientListeners.size(); i++)				((VectorListener) transientListeners.elementAt(i))						.updateVector(new VectorChangeEvent(changeable,								VectorChangeEvent.DeleteComponentEvent, pos,								oldElement, null, changeableCopy.size() - 1));			changeableCopy.removeElementAt(pos);			notifyElementRemoved(pos);		} catch (Exception e) {			System.out.println("Illegal remove index:" + pos + " in "					+ changeable);			e.printStackTrace();		}	}	protected void notifyElementRemoved(int pos) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementRemoved(changeable, pos, getSize());		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementRemoved(changeable, pos, getSize());		}	}	protected void notifyElementReplaced(int index1, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementReplaced(changeable, index1, getSize(), index2);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementReplaced(changeable, index1, getSize(), index2);		}	}	protected void notifyElementReplaced(int index1, Object other, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementReplaced(changeable, index1, getSize(), other,							index2);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementReplaced(changeable, index1, getSize(), index2);		}	}	protected void notifyElementSwapped(int index1, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementSwapped(changeable, index1, index2);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementSwapped(changeable, index1, index2);		}	}	protected void notifyElementSwapped(int index1, Object other, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementSwapped(changeable, index1, other, index2);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementSwapped(changeable, index1, other, index2);		}	}	protected void notifyElementMoved(int index1, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementMoved(changeable, index1, index2);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementMoved(changeable, index1, index2);		}	}	protected void notifyElementCopyInserted(int index1, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementCopiedAndInserted(changeable, index1, index2, changeableCopy.size() + 1);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementCopiedAndInserted(changeable, index1, index2, changeableCopy.size() + 1);		}	}	protected void notifyElementMoved(int index1, Object other, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementMoved(changeable, index1, getSize(), other, index2);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementMoved(changeable, index1, getSize(), other, index2);		}	}	protected void notifyElementCopyInserted(int index1, Object other, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementCopiedAndInserted(changeable, index1, getSize(), other, index2);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementCopiedAndInserted(changeable, index1, getSize(), other, index2);		}	}		protected void notifyElementCopiedToUserObject(int index) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementCopiedToUserObject(changeable, index);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementCopiedToUserObject(changeable, index);		}	}		protected void notifyElementCopiedFromUserObject(int index) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementCopiedFromUserObject(changeable, index);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementCopiedFromUserObject(changeable, index);		}	}	protected void notifyElementCopiedToTemp(int index) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementCopiedToTemp(changeable, index);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementCopiedToTemp(changeable, index);		}	}		protected void notifyElementCopiedFromTemp(int index) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementCopiedFromTemp(changeable, index);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementCopiedFromTemp(changeable, index);		}	}	protected void notifyElementCopied(int index1, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementCopied(changeable, index1, index2, getSize());		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementCopied(changeable, index1, index2, getSize());		}	}	protected void notifyElementCopied(int index1, Object other, int index2) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementCopied(changeable, index1, getSize(), other, index2);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementCopied(changeable, index1, getSize(), other, index2);		}	}	public void elementRemoved(ElementType element) {		initTransients();		int pos = changeableCopy.indexOf(element);		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.DeleteComponentEvent, pos,							element, null, changeableCopy.size() - 1));		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.DeleteComponentEvent, pos,							element, null, changeableCopy.size() - 1));				changeableCopy.removeElement(element);		notifyElementRemoved(element, pos);	}	public void elementsCleared() {		initTransients();		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ClearEvent, 0, null, null, 0));		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ClearEvent, 0, null, null, 0));		;		changeableCopy.removeAllElements();		notifyElementsCleared();	}	protected void notifyElementRemoved(ElementType element, int pos) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementRemoved(changeable, element, getSize(), pos);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementRemoved(changeable, element, getSize(), pos);		}	}	protected void notifyElementsCleared() {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementsCleared(changeable);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementsCleared(changeable);		}	}	public void fireUpdateVector(VectorChangeEvent vectorEvent) {		initTransients();		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i)).updateVector(vectorEvent);		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(vectorEvent);		;	}	public void fireElementAdded(ElementType source, ElementType element,			int newSize) {		// TODO Auto-generated method stub		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementAdded(source, element, newSize);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementAdded(source, element, newSize);		}	}	public void fireElementChanged(Object source, ElementType element, int pos) {		// TODO Auto-generated method stub		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementChanged(source, element, pos);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementChanged(source, element, pos);		}	}	public void fireElementInserted(Object source, ElementType element,			int pos, int newSize) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementInserted(source, element, pos, newSize);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementInserted(source, element, pos, newSize);		}	}	public void fireElementRemoved(Object source, int pos, int newSize) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementRemoved(source, pos, newSize);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementRemoved(source, pos, newSize);		}	}	public void fireElementRemoved(Object source, ElementType element,			int newSize) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementRemoved(source, element, newSize, -1);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementRemoved(source, element, newSize, -1);		}	}	public void fireElementsCleared(Object source) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementsCleared(source);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementsCleared(source);		}	}	public void elementRead(ElementType element, Integer pos) {		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReadComponentEvent, pos, element,							element, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReadComponentEvent, pos, element,							element, changeableCopy.size()));		notifyElementRead(element, pos);	}		public void userObjectRead() {		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReadUserObjectEvent, -1, null,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReadUserObjectEvent, -1, null,							null, changeableCopy.size()));		notifyUserObjectRead(changeableCopy.getUserObject());	}		public void tempRead() {		for (int i = 0; i < listeners.size(); i++)			((VectorListener) listeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReadTempEvent, -1, null,							null, changeableCopy.size()));		initTransients();		for (int i = 0; i < transientListeners.size(); i++)			((VectorListener) transientListeners.elementAt(i))					.updateVector(new VectorChangeEvent(changeable,							VectorChangeEvent.ReadTempEvent, -1, null,							null, changeableCopy.size()));		notifyTempRead(changeableCopy.getTemp());	}	@SuppressWarnings({ "rawtypes", "unchecked" })	public void notifyElementRead(ElementType element, Integer pos) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.elementRead(changeable, element, pos);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))					.elementRead(changeable, element, pos);		}	}		@SuppressWarnings({ "rawtypes", "unchecked" })	public void notifyUserObjectRead( Object readValue) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.userObjectRead(changeable, readValue);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))			.userObjectRead(changeable, readValue);		}	}		@SuppressWarnings({ "rawtypes", "unchecked" })	public void notifyTempRead(Object readValue) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.tempRead(changeable, readValue);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))			.tempRead(changeable, readValue);		}	}		@SuppressWarnings({ "rawtypes", "unchecked" })	public void notifyUserObjectToTemp( Object copiedValue) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.userObjectCopiedToTemp(changeable, copiedValue);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))			.userObjectCopiedToTemp(changeable, copiedValue);		}	}		@SuppressWarnings({ "rawtypes", "unchecked" })	public void notifyTempToUserObject( Object aSource) {		initTransients();		for (int i = 0; i < methodsListeners.size(); i++) {			((VectorMethodsListener) methodsListeners.elementAt(i))					.tempCopiedToUserObject(changeable, aSource);		}		for (int i = 0; i < transientMethodsListeners.size(); i++) {			((VectorMethodsListener) transientMethodsListeners.elementAt(i))			.tempCopiedToUserObject(changeable, aSource);		}	}}